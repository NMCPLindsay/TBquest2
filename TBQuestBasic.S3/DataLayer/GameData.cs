using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TBQuestBasic.Models;
using System.Collections.ObjectModel;

namespace TBQuestBasic.DataLayer
{
    public static class GameData
    {

        public static Player PlayerData()
        {

            return new Player()
            {
                Id = 1,
                Name = "Jugo Sabine",
                LocationId = 0,
                Race = Character.Races.Mandalorian,
                Align = Player.Alignments.Evil,
                Level = 1,
                HitPoints = 100,
                EXP = 0,
                Bio = "The mandalorians were a proud race of bounty hunters. The most famous of which are the late Jango Fett and his son, Boba Fett.",
                ImgFileName = @"C:\Users\phili\Desktop\Application Dev\TBQuestBasic\TBQuestBassic\Assets\mandolorian.jpg"

            };



        }

        public static Ship ShipData()
        {
            return new Ship
            {
                ShipName = "Slave-B",
                Range = 250,
                ShipClass = Ship.ShipClasses.Transport
            };

        }

        public static List<string> InitialMessages(Player player)
        {
            return new List<string>
            {
                $"Hello, {player.Name}. You have been selected to search and apprehend or eliminate contracts from clients of Bounty Force.",
                "Please see the Mission Briefer for your mission and good luck. Do not disappoint."


            };


        }





        public static Map GameMapData()
        {
            Map gameMap = new Map();
            gameMap.Locations = new List<Location>();
            

                gameMap.Locations.Add
                (new Location()
                {
                    Id = 1,
                    Name = "Coruscant",
                    Description = "Located in the Coruscant subsector of the Corusca sector within the Core Worlds region, Coruscant was a planet covered in a dense ecumenopolis. " +
                    "12,240 kilometers in diameter, Coruscant orbited relatively far from its small sun, varying from 207 to 251 million kilometers, " +
                    "and thus did not have a climate that suited any one particular species (although this inconvenience was rectified by technological means and the vast heat generated by the multi-level cityscape). " +
                    "From space, Coruscant's luminosity was slightly dimmed by the planet's hazy cloud cover. The planet's weather patterns were affected by the troposphere-piercing buildings that covered the planet's surface. " +
                    "Inside the tallest buildings, enormous differences of temperature and air pressure from top to bottom produced unusual and unpredictable microclimates. As such, Coruscant had its own weather-control system. " +
                    "Thousands of years of development destroyed the planet's ancient mountains and seas. Monument Plaza housed the top of Coruscant's last remaining mountain peak.",

                    DistanceFromCoruscant = 0

                });
            gameMap.Locations.Add
                (new Location()
                {
                    Id = 2,
                    Name = "Tatooine",
                    Description = "Tatooine was a planet located in the Outer Rim, a region of the galaxy far removed from its core." +
                    " It had three moons, Ghomrassen, Guermessa and Chenini. Long ago, Tatooine was covered in oceans and rainforests but for unknown reasons, it became a hot desert world." +
                    " Tatooine was orbiting its two suns, Tatoo I and Tatoo II. The whole planet was covered in harsh deserts, and only a small part of its northern hemisphere could sustain intelligent life." +
                    " The landscape was covered with sand dunes, mountains, and canyons, which made traversing the planet very difficult." +
                    " Due to the absence of surface water, those who lived on Tatooine had to draw moisture through the dry air.",
                    DistanceFromCoruscant = 250,

                });
            gameMap.Locations.Add
                (new Location()
                {
                    Id = 3,
                    Name = "Hoth",
                    Description = "From space, the planet of Hoth looked like a pale blue orb due to its dense snow and ice covering. " +
                    "Five planets existed between Hoth and its sun, while an asteroid belt surrounded the planet with meteors occasionally striking the surface. Its surface was covered with glaciers and frozen ice plains." +
                    " The temperature, although always frigid, was known to drop to -60°C come nightfall. Although devoid of intelligent life, " +
                    "Hoth was home to fifteen species of large gray snow lizards called tauntauns and to a species of towering predators known as wampas.",

                    DistanceFromCoruscant = 500

                });
            gameMap.InitialLocation = gameMap.Locations.FirstOrDefault(l => l.Id == 1);
            
            gameMap.AccessibleLocations = ShipRangeToDistance(gameMap.CurrentLocation , ShipData());




            return gameMap;     
        }

     

        public static ObservableCollection<Location> ShipRangeToDistance(Location currentLocation, Ship ship)
        {


            double distanceFromCurrentLocation;

            ObservableCollection<Location> accessibleLocations = new ObservableCollection<Location>();

            foreach (Location location in GameMapData().Locations)
            {
                if (location.DistanceFromCoruscant >= currentLocation.DistanceFromCoruscant)
                {
                    distanceFromCurrentLocation = location.DistanceFromCoruscant - currentLocation.DistanceFromCoruscant;
                    if (ship.Range >= distanceFromCurrentLocation && location.Name != currentLocation.Name)
                    {
                        accessibleLocations.Add(location);
                        location.IsAccessible = true;

                    }
                    else
                    {
                        accessibleLocations.Remove(location);
                        location.IsAccessible = false;
                    }
                }
                else if (location.DistanceFromCoruscant <= currentLocation.DistanceFromCoruscant)
                {
                    distanceFromCurrentLocation = currentLocation.DistanceFromCoruscant - location.DistanceFromCoruscant;
                    if (ship.Range >= distanceFromCurrentLocation && location.Name != currentLocation.Name)
                    {
                        accessibleLocations.Add(location);
                        location.IsAccessible = true;
                    }
                    else
                    {
                        accessibleLocations.Remove(location);
                        location.IsAccessible = false;
                    }
                }



            }
            return accessibleLocations;
        }









        public static Location initialLocation()
        {
            Map map = GameMapData();
            return map.InitialLocation = map.Locations.FirstOrDefault(l => l.Id == 1);
        }
    }
}
